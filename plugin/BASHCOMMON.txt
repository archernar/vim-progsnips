#!/bin/bash
SCR=$(echo "$0" | gawk '{n=split($0, a, "/"); print a[n];}')
Tmp=/tmp/$$
Tmp1="/tmp/"$SCR"_"$$
Tmp2="/tmp/"$SCR"_"$$"_"$$
Tmp3="/tmp/"$SCR"_"$$"_"$$"_"$$
Tmp4="/tmp/"$SCR"_"$$"_"$$"_"$$"_"$$
trap 'exit 0' INT HUP QUIT TERM ALRM USR1
trap 'rm -f "$Tmp" "$Tmp1" "$Tmp2" "$Tmp3" "$Tmp4"' EXIT
rm -f "$Tmp"  >/dev/null 2>&1
rm -f "$Tmp1" >/dev/null 2>&1
rm -f "$Tmp2" >/dev/null 2>&1
rm -f "$Tmp3" >/dev/null 2>&1
rm -f "$Tmp4" >/dev/null 2>&1

REPO=vim-progsnips
ANON=`date`
echo $ANON

while getopts "g" arg
do
    case $arg in
        a) ACCOUNT=$OPTARG
           ;;
	*) exit 0
           ;;
    esac
done
shift $(($OPTIND - 1))



logmsg() {
echo "$(date) $(whoami) $(pwd) $(printf "%-11s" $SCR) $(printf "%-7s" $1) $2" >> /var/log/toc
}
msg() {
echo $1 >> /var/log/toc
}
logfile() {
echo "****************" >> /var/log/toc
echo "** FILE DUMP" >> /var/log/toc
echo "****************" >> /var/log/toc
echo "$(date) $(whoami) $(pwd) $SCR  START $1" >> /var/log/toc
cat "$1" >> /var/log/toc
echo "$(date) $(whoami) $(pwd) $SCR  END   $1" >> /var/log/toc
}

# echo "$(date) $(whoami) $(pwd) $(pwd | gawk '{n=split($0,a,"/"); printf "%-11s" a[n];}') $(printf "%-7s" $1) $2" >> /var/log/toc


mkredirect() {
    ls | gawk -v url=$1 '
         function sq(sz) { return "\x27" sz "\x27" }
         BEGIN {
             print "<!DOCTYPE HTML>"
             print "<html>"
             print "<head>"
             print "<!--"
             print "REDIRECT URL IS: " url
             print "-->"
             print "<meta http-equiv=" sq("refresh") " content=" sq("0; URL=" url) " />"
             print "</head>"
             print "</html>"
         }' > /tmp/redirect.html
}



cleanurl() {
    logmsg "MOE" "$1"
    ARG=$(echo $1 | gawk '{sz=$0;gsub("[%]20", " ", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]23", "#", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]25", "%", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]26", "&", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]3A", ":", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]3F", "?", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]3D", "=", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]2F", "/", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]7C", "|", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("[%]2C", ",", sz);print sz;}')
    ARG=$(echo $ARG | gawk '{sz=$0;gsub("%26", "&", sz);print sz;}')
    echo $ARG
}


while getopts "a:r:" arg
do
	case $arg in
            a) ACCOUNT=$OPTARG
               ;;
            r) REGION=$OPTARG
               ;;
	      *) exit 0
               ;;
	esac
done
shift $(($OPTIND - 1))

# -a file file exists
# -d file file exists and is a directory
# -f file file exists and is an ordinary file
# -r file file exists and is readable
# -s file file exists and has a size greater than 0
# -w file file exits and is writable
# -x file file exists and is executable
# -L file file exists and is a symbolic link
# -O file file exists and owned by user file1 i
# -nt file2 file1 exists and is newer than file2 file1 
# -ot file2 file1 exists and is older then file

if [[ "$V" = "RESET" ]]; then
else
fi

Command line
if [ $? -ne 0 ]; then
     logmsg "$func" "$retVal"
else
     logmsg "$func" "OK"
fi

if [ ! -r "${VAR}" ]; then
else
  print ""
fi
programname=$0

function usage {
    echo "usage: $programname [-abch] [-f infile] [-o outfile]"
    echo "  -a      turn on feature a"
    echo "  -b      turn on feature b"
    echo "  -c      turn on feature c"
    echo "  -h      display help"
    echo "  -f infile   specify input file infile"
    echo "  -o outfile  specify output file outfile"
    exit 1
}


